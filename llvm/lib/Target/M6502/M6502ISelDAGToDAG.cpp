// TODO: header stuff

#include "llvm/CodeGen/SelectionDAGISel.h"

#include "M6502.h"
#include "M6502TargetMachine.h"
#include "MCTargetDesc/M6502MCTargetDesc.h"

#define DEBUG_TYPE "m6502-isel"

namespace llvm {

/// Lowers LLVM IR (in DAG form) to M6502 MC instructions (in DAG form).
class M6502DAGToDAGISel : public SelectionDAGISel {
public:
  M6502DAGToDAGISel(M6502TargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel) {}

  StringRef getPassName() const override {
    return "M6502 DAG->DAG Instruction Selection";
  }

// Include the pieces autogenerated from the target description.
#include "M6502GenDAGISel.inc"

private:
  void Select(SDNode *N) override;
  bool trySelect(SDNode *N);
};

FunctionPass *createM6502ISelDag(M6502TargetMachine &TM,
                                 CodeGenOpt::Level OptLevel) {
  return new M6502DAGToDAGISel(TM, OptLevel);
}

void M6502DAGToDAGISel::Select(SDNode *N) {
  // If we have a custom node, we already have selected!
  if (N->isMachineOpcode()) {
    LLVM_DEBUG(errs() << "== "; N->dump(CurDAG); errs() << "\n");
    N->setNodeId(-1);
    return;
  }
  
  // See if subclasses can handle this node.
  if (trySelect(N))
    return;

  // Select the default instruction
  SelectCode(N);
}

bool M6502DAGToDAGISel::trySelect(SDNode *N) {
  unsigned Opcode = N->getOpcode();
  SDLoc DL(N);

  switch (Opcode) {
  // TODO
  default: return false;
  }
}

} // end of namespace llvm
